import heapq
import sys
input = sys.stdin.readline
INF = int(1e9)  # 무한

n, m = map(int, input().split())
start = int(input())
G = [[] for i in range(n + 1)]  # 각 노드에 대한 정보
distance = [INF] * (n + 1)  # 최단 거리 테이블 모두 무한으로 초기화

for _ in range(m):
    a, b, c = map(int, input().split())  # 간선
    G[a].append((b, c))  # a 에서 b로 갈 때 비용 c


def dijkstra(start):
    q = []
    heapq.heappush(q, (0, start)) #시작 노드는 0으로 설정
    distance[start] = 0

    while q: #큐가 비어있지 않다면
        dist, now = heapq.heappop(q) #가장 최단거리인 노드 정보 꺼내기

        if distance[now] < dist: #이미 처리된 노드라면 무시
            continue

        for i in G[now]: #인접한 노드들 확인
            cost = dist + i[1]

            if cost < distance[i[0]]: #다른 노드로 이동하는 거리가 더 짧은 경우
                distance[i[0]] = cost
                heapq.heappush(q, (cost, i[0]))

dijkstra(start)

for i in range(1, n+1):
    if distance[i] == INF:
        print('INF')

    else:
        print(distance[i])
